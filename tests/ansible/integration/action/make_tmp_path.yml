#
# Ensure _make_tmp_path returns the same result across invocations for a single
# user account, and that the path returned cleans itself up on connection
# termination.
#
# Related bugs prior to the new-style handling:
#   https://github.com/dw/mitogen/issues/239
#   https://github.com/dw/mitogen/issues/301

- name: integration/action/make_tmp_path.yml
  hosts: test-targets
  any_errors_fatal: true
  tasks:
    - meta: end_play
      when: not is_mitogen

    #
    # non-root
    #

    - name: "Find regular temp path"
      mitogen_action_script:
        script: |
          path = self._make_tmp_path()
          self._remove_tmp_path(path)
      register: tmp_path

    - name: "Find regular temp path (new task)"
      mitogen_action_script:
        script: |
          path = self._make_tmp_path()
          self._remove_tmp_path(path)
      register: tmp_path2

    - name: "Find good temp path"
      set_fact:
        good_temp_path: "{{tmp_path.path|dirname}}"

    - name: "Find good temp path (new task)"
      set_fact:
        good_temp_path2: "{{tmp_path2.path|dirname}}"

    - name: "Verify common base path for both tasks"
      assert:
        that:
        - good_temp_path == good_temp_path2
        fail_msg: good_temp_path={{good_temp_path}} good_temp_path2={{good_temp_path2}}

    - name: "Verify different subdir for both tasks"
      assert:
        that:
        - tmp_path.path != tmp_path2.path
        fail_msg: tmp_path={{tmp_path}} tmp_path2={{tmp_path2}}

    #
    # Verify subdirectory removal.
    #

    - name: Stat temp path
      stat:
        path: "{{tmp_path.path}}"
      register: stat1

    - name: Stat temp path (new task)
      stat:
        path: "{{tmp_path2.path}}"
      register: stat2

    - name: "Verify neither subdir exists any more"
      assert:
        that:
        - not stat1.stat.exists
        - not stat2.stat.exists
        fail_msg: stat1={{stat1}} stat2={{stat2}}

    #
    # Verify good directory persistence.
    #

    - name: Stat good temp path (new task)
      stat:
        path: "{{good_temp_path}}"
      register: stat

    - name: "Verify good temp path is persistent"
      assert:
        that:
        - stat.stat.exists
        fail_msg: stat={{stat}}

    #
    # Write some junk into the temp path.
    #

    - name: "Write junk to temp path and verify it disappears"
      custom_python_run_script:
        script: |
          from ansible.module_utils.basic import get_module_path
          path = get_module_path() + '/foo.txt'
          result['path'] = path
          open(path, 'w').write("bar")
      register: out

    - name: "Verify junk disappeared."
      stat:
        path: "{{out.path}}"
      register: out

    - assert:
        that:
        - not out.stat.exists
        fail_msg: out={{out}}

    #
    # root
    #

    - name: "Find root temp path"
      become: true
      mitogen_action_script:
        script: |
          path = self._make_tmp_path()
          self._remove_tmp_path(path)
      register: tmp_path_root

    - name: "Verify root temp path differs from regular path"
      assert:
        that:
        - tmp_path2.path != tmp_path_root.path
        - tmp_path2.path|dirname != tmp_path_root.path|dirname
        fail_msg: tmp_path_root={{tmp_path_root}} tmp_path2={{tmp_path2}}

    #
    # readonly homedir
    #

    # TODO: https://github.com/dw/mitogen/issues/692
    # - name: "Try writing to temp directory for the readonly_homedir user"
    #   become: true
    #   become_user: mitogen__readonly_homedir
    #   custom_python_run_script:
    #     script: |
    #       from ansible.module_utils.basic import get_module_path
    #       path = get_module_path() + '/foo.txt'
    #       result['path'] = path
    #       open(path, 'w').write("bar")
    #   register: tmp_path

    #
    # modules get the same base dir
    #

    - name: "Verify modules get the same tmpdir as the action plugin"
      custom_python_detect_environment:
      register: out

    - name: "Verify modules get the same tmpdir as the action plugin"
      assert:
        that:
        - out.module_path.startswith(good_temp_path2)
        - out.module_tmpdir.startswith(good_temp_path2)
        fail_msg: out={{out}}
  tags:
    - make_tmp_path
